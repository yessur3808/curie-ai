import os
import git
from github import Github
import llm.manager

def extract_github_repo(main_repo_url):
    import re
    m = re.match(r"https?://github\.com/([^/]+/[^/]+)(?:\.git)?", main_repo_url.strip())
    if m:
        return m.group(1)
    raise ValueError("Could not extract GitHub repo from URL")

def ai_project_idea_suggestions(goal, files_to_edit, repo_path, model_name):
    prompt = (
        "As an expert developer and project architect, review the following project files "
        f"({', '.join(files_to_edit)}) and the recent code enhancement goal: {goal}\n"
        "Suggest up to 3 significant and genuinely helpful project ideas, refactors, or new features "
        "that could meaningfully improve the codebase or its usefulness. "
        "For each idea, give a short summary and explain why it would be valuable. "
        "Output as a markdown list. Avoid duplicating what's already in the project."
    )
    # (Optional) You could include current code context if you wish.
    return llm.manager.ask_llm(prompt, model_name=model_name, max_tokens=400)

def apply_code_change(goal, files_to_edit, repo_path, branch_name):
    GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
    MAIN_REPO = os.getenv("MAIN_REPO")
    CODING_MODEL_NAME = os.getenv("CODING_MODEL_NAME", "codellama-34b-instruct.Q4_K_M.gguf")
    GITHUB_REPO = extract_github_repo(MAIN_REPO)

    repo = git.Repo(repo_path)
    origin = repo.remote(name="origin")
    remote_url = f"https://{GITHUB_TOKEN}@github.com/{GITHUB_REPO}.git"
    origin.set_url(remote_url)

    base = repo.active_branch

    # ONLY allow PRs against main, never merge or push to main!
    target_base = "main"

    # Always create a new feature branch
    if branch_name in repo.heads:
        new_branch = repo.heads[branch_name]
    else:
        new_branch = repo.create_head(branch_name)
    new_branch.checkout()

    changes = {}
    for filename in files_to_edit:
        file_path = os.path.join(repo_path, filename)
        with open(file_path) as f:
            old_code = f.read()
        prompt = (
            f"You are an expert developer. {goal}\n"
            f"Here is the current code of {filename}:\n{old_code}\n"
            "Please provide clear enhancements and optimizations to the code of this file. "
            "Only make changes that are useful, do not break the code, and add helpful comments where appropriate. "
            "Do not introduce new features unless they directly support the stated goal."
        )
        new_code = llm.manager.ask_llm(prompt, model_name=CODING_MODEL_NAME, max_tokens=2048)
        with open(file_path, "w") as f:
            f.write(new_code)
        changes[filename] = new_code

    repo.git.add(all=True)
    repo.git.commit(m=f"AI: {goal}")
    origin.push(refspec=f"{branch_name}:{branch_name}")

    g = Github(GITHUB_TOKEN)
    gh_repo = g.get_repo(GITHUB_REPO)
    pr_title = f"AI: {goal}"
    pr_body = (
        f"Automated code enhancement for: {goal}\n\n"
        f"Files changed: {', '.join(files_to_edit)}\n\n"
        "This PR was generated by the AI assistant. Please review before merging.\n"
    )
    pulls = gh_repo.get_pulls(state='open', head=f"{gh_repo.owner.login}:{branch_name}")

    if pulls.totalCount == 0:
        pr = gh_repo.create_pull(
            title=pr_title,
            body=pr_body,
            head=branch_name,
            base=target_base  # Always main, never merge directly!
        )
        pr.add_to_labels("AI-Generated")
        pr_url = pr.html_url
    else:
        pr = pulls[0]
        pr_url = pr.html_url

    # ---- AI Project Suggestions as PR Comment ----
    suggestions_md = ai_project_idea_suggestions(goal, files_to_edit, repo_path, CODING_MODEL_NAME)
    suggestion_comment = (
        "### ðŸ¤– AI Project Suggestions\n\n"
        "Here are some ideas for further improving this project:\n\n"
        f"{suggestions_md}\n\n"
        "*Generated by CodeLlama AI.*"
    )
    pr.create_issue_comment(suggestion_comment)

    return branch_name, changes, pr_url